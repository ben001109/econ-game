services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: game
      POSTGRES_PASSWORD: gamepass
      POSTGRES_DB: game
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U game -d game" ]
      interval: 5s
      timeout: 3s
      retries: 20

  redis:
    image: redis:7-alpine
    command: [ "redis-server", "--save", "60", "1", "--loglevel", "warning" ]
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data

  api:
    build: ./services/api
    profiles: [ "prod" ]
    command: sh -c "npx prisma db push && node dist/index.js | tee -a /logs/api.log"
    env_file:
      - ./services/api/.env
      - ./services/api/.env.local
    ports:
      - "4000:4000"
    volumes:
      - ./logs:/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  worker:
    build: ./services/worker
    profiles: [ "prod" ]
    command: sh -c "node dist/index.js | tee -a /logs/worker.log"
    env_file:
      - ./services/worker/.env
      - ./services/worker/.env.local
    volumes:
      - ./logs:/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  frontend:
    build: ./services/frontend
    profiles: [ "prod" ]
    command: sh -c "npm run start | tee -a /logs/frontend.log"
    env_file:
      - ./services/frontend/.env
      - ./services/frontend/.env.local
    ports:
      - "3000:3000"
    volumes:
      - ./logs:/logs
    depends_on:
      api:
        condition: service_started

  bot:
    build: ./services/bot
    profiles: [ "prod" ]
    command: sh -c "node dist/index.js | tee -a /logs/bot.log"
    env_file:
      #- ./services/bot/.env
      - ./services/bot/.env.local
    volumes:
      - ./logs:/logs
    depends_on:
      api:
        condition: service_started
      redis:
        condition: service_started

  adminer:
    image: adminer:4
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy

  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      redis:
        condition: service_started

  # Development profile: hot-reload API and worker using ts-node-dev
  api-dev:
    profiles: [ "dev" ]
    image: node:20-bullseye-slim
    working_dir: /app
    # install OpenSSL (Prisma engine uses libssl1.1 on bullseye)
    user: root
    command: sh -c "apt-get update && apt-get install -y openssl && npm install && npx prisma generate && npx prisma db push && (npm run dev | tee -a /logs/api-dev.log)"
    environment:
      NODE_ENV: development
      # Use a separate Prisma schema for dev to isolate tables
      DATABASE_URL: postgresql://game:gamepass@postgres:5432/game?schema=dev
    env_file:
      - ./services/api/.env
      - ./services/api/.env.local
    volumes:
      - ./services/api:/app
      # keep container node_modules so host mount doesn't hide it
      - /app/node_modules
      - ./logs:/logs
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  worker-dev:
    profiles: [ "dev" ]
    image: node:20-bookworm-slim
    working_dir: /app
    command: sh -c "npm install && (npm run dev | tee -a /logs/worker-dev.log)"
    environment:
      NODE_ENV: development
      # Match API dev DB schema for isolation
      DATABASE_URL: postgresql://game:gamepass@postgres:5432/game?schema=dev
    env_file:
      - ./services/worker/.env
      - ./services/worker/.env.local
    volumes:
      - ./services/worker:/app
      - /app/node_modules
      - ./logs:/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  frontend-dev:
    profiles: [ "dev" ]
    image: node:20-bookworm-slim
    working_dir: /app
    command: sh -c "npm install && (npm run dev | tee -a /logs/frontend-dev.log)"
    environment:
      NODE_ENV: development
    env_file:
      - ./services/frontend/.env
      - ./services/frontend/.env.local
    volumes:
      - ./services/frontend:/app
      - /app/node_modules
      - ./logs:/logs
    ports:
      - "3000:3000"
    depends_on:
      api-dev:
        condition: service_started

  bot-dev:
    profiles: [ "dev" ]
    image: node:20-bookworm-slim
    working_dir: /app
    command: sh -c "npm install && (npm run dev | tee -a /logs/bot-dev.log)"
    environment:
      NODE_ENV: development
    env_file:
      # - ./services/bot/.env
      - ./services/bot/.env.local
    volumes:
      - ./services/bot:/app
      - /app/node_modules
      - ./logs:/logs
    depends_on:
      api-dev:
        condition: service_started
      redis:
        condition: service_started

  # Bun profile: run services with Bun-based images
  api-bun:
    profiles: [ "bun" ]
    build:
      context: ./services/api
      dockerfile: Dockerfile.bun
    command: sh -c "bun run bun:start | tee -a /logs/api-bun.log"
    env_file:
      - ./services/api/.env
      - ./services/api/.env.local
    ports:
      - "4000:4000"
    volumes:
      - ./logs:/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  worker-bun:
    profiles: [ "bun" ]
    build:
      context: ./services/worker
      dockerfile: Dockerfile.bun
    command: sh -c "bun run bun:start | tee -a /logs/worker-bun.log"
    env_file:
      - ./services/worker/.env
      - ./services/worker/.env.local
    volumes:
      - ./logs:/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  frontend-bun:
    profiles: [ "bun" ]
    build:
      context: ./services/frontend
      dockerfile: Dockerfile.bun
    command: sh -c "bunx next start -p 3000 | tee -a /logs/frontend-bun.log"
    env_file:
      - ./services/frontend/.env
      - ./services/frontend/.env.local
    ports:
      - "3000:3000"
    volumes:
      - ./logs:/logs
    depends_on:
      api-bun:
        condition: service_started

  bot-bun:
    profiles: [ "bun" ]
    build:
      context: ./services/bot
      dockerfile: Dockerfile.bun
    command: sh -c "bun run bun:start | tee -a /logs/bot-bun.log"
    env_file:
      # - ./services/bot/.env
      - ./services/bot/.env.local
    volumes:
      - ./logs:/logs
    depends_on:
      api-bun:
        condition: service_started
      redis:
        condition: service_started

volumes:
  db-data:
  redis-data:
