name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  lint-build:
    name: Lint and Build (${{ matrix.service }})
    runs-on: ubuntu-latest
    env:
      DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - service: api
            dir: services/api
          - service: worker
            dir: services/worker
          - service: frontend
            dir: services/frontend
    defaults:
      run:
        working-directory: ${{ matrix.dir }}
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.dir }}/package-lock.json

      - name: Discord token not set (worker)
        if: ${{ matrix.service == 'worker' && !secrets.DISCORD_BOT_TOKEN }}
        run: echo "::notice title=Discord::DISCORD_BOT_TOKEN not set; worker will skip Discord features"

      - name: Install deps
        run: |
          if [ -f package-lock.json ]; then npm ci --no-audit --ignore-scripts; else npm install --no-audit --ignore-scripts; fi

      - name: Generate Prisma Client (if script exists)
        run: |
          npm run prisma:generate --if-present

      - name: Lint
        run: |
          npm run lint --if-present

      - name: Build
        run: |
          npm run build --if-present

  lint-build-windows:
    name: Lint and Build (Windows ${{ matrix.service }})
    runs-on: windows-latest
    env:
      DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - service: api
            dir: services/api
          - service: worker
            dir: services/worker
          - service: frontend
            dir: services/frontend
    defaults:
      run:
        working-directory: ${{ matrix.dir }}
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.dir }}/package-lock.json

      - name: Discord token not set (worker)
        if: ${{ matrix.service == 'worker' && !secrets.DISCORD_BOT_TOKEN }}
        run: echo "::notice title=Discord::DISCORD_BOT_TOKEN not set; worker will skip Discord features"

      - name: Install deps
        run: |
          if [ -f package-lock.json ]; then npm ci --no-audit --ignore-scripts; else npm install --no-audit --ignore-scripts; fi

      - name: Generate Prisma Client (if script exists)
        run: |
          npm run prisma:generate --if-present

      - name: Lint
        run: |
          npm run lint --if-present

      - name: Build
        run: |
          npm run build --if-present

  docker-build:
    name: Docker Build (${{ matrix.service }})
    runs-on: ubuntu-latest
    needs: lint-build
    strategy:
      fail-fast: false
      matrix:
        include:
          - service: api
            context: services/api
          - service: worker
            context: services/worker
          - service: frontend
            context: services/frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.context }}/Dockerfile
          push: false
          load: true
          tags: econ-game/${{ matrix.service }}:ci
